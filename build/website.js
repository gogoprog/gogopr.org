// Generated by Haxe 3.4.7
(function ($hx_exports) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var Executable = function() { };
var Lambda = function() { };
Lambda.exists = function(it,f) {
	var x = it.iterator();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
var List = function() {
	this.length = 0;
};
List.prototype = {
	iterator: function() {
		return new _$List_ListIterator(this.h);
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var Program = function() {
};
Program.__interfaces__ = [Executable];
Program.prototype = {
	run: function(terminal,args) {
		terminal.print("Error");
	}
};
var Script = function(file) {
	this.lines = [];
	if(file != null) {
		this.loadFromFile(file);
	}
};
Script.__interfaces__ = [Executable];
Script.prototype = {
	run: function(terminal,args) {
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			WebOS.instance.execute(line);
		}
	}
	,loadFromFile: function(file) {
		var _gthis = this;
		var http = new haxe_Http(file);
		http.onData = function(data) {
			_gthis.lines = data.split("\n");
		};
		http.request();
	}
};
var WebOS = function() {
	this.executables = new haxe_ds_StringMap();
	WebOS.instance = this;
	this.initTerminal();
	this.initPrograms();
};
WebOS.prototype = {
	boot: function() {
		this.welcome();
	}
	,execute: function(input) {
		var words = input.split(" ");
		var cmd = words[0];
		var _this = this.executables;
		var exe = __map_reserved[cmd] != null ? _this.getReserved(cmd) : _this.h[cmd];
		if(cmd.length > 0) {
			if(exe != null) {
				words.shift();
				exe.run(this.terminal,words.join(" "));
			} else {
				this.terminal.print("Unknown command: " + cmd);
			}
		}
	}
	,initTerminal: function() {
		this.terminal = new terminaljs_Terminal();
		this.terminal.setHeight("100%");
		this.terminal.setWidth("100%");
		this.terminal.setBackgroundColor("rgba(0,0,0,0.35)");
		this.terminal.setPrompt("[<span style='color:yellow'>user</span>@<span style='color:grey'>gogopr.org</span>]$ ");
		window.document.body.appendChild(this.terminal.html);
		this.terminal.input($bind(this,this.execute));
	}
	,initPrograms: function() {
		var this1 = this.executables;
		var v = new programs_Cat();
		var _this = this1;
		if(__map_reserved["cat"] != null) {
			_this.setReserved("cat",v);
		} else {
			_this.h["cat"] = v;
		}
		var this2 = this.executables;
		var v1 = new programs_Echo();
		var _this1 = this2;
		if(__map_reserved["echo"] != null) {
			_this1.setReserved("echo",v1);
		} else {
			_this1.h["echo"] = v1;
		}
		var this3 = this.executables;
		var v2 = new Script("static/bin/welcome");
		var _this2 = this3;
		if(__map_reserved["welcome"] != null) {
			_this2.setReserved("welcome",v2);
		} else {
			_this2.h["welcome"] = v2;
		}
	}
	,welcome: function() {
	}
};
var Website = function() { };
Website.main = function() {
	var webos = new WebOS();
	webos.boot();
};
var haxe_IMap = function() { };
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
	this.withCredentials = false;
};
haxe_Http.prototype = {
	request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				s = null;
			}
			if(s != null && "undefined" !== typeof window) {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					if(r.responseText != null) {
						s = 200;
					} else {
						s = 404;
					}
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				me.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else {
				switch(s) {
				case 12007:
					me.req = null;
					me.onError("Unknown host");
					break;
				case 12029:
					me.req = null;
					me.onError("Failed to connect to host");
					break;
				default:
					me.req = null;
					me.responseData = r.responseText;
					me.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var _g_head = this.params.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				var s1 = p.param;
				var uri1 = encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri += uri1 + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + uri,this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g_head1 = this.headers.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var h1 = val1;
			r.setRequestHeader(h1.header,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Browser = function() { };
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var programs_Cat = function() {
	Program.call(this);
};
programs_Cat.__super__ = Program;
programs_Cat.prototype = $extend(Program.prototype,{
	run: function(terminal,args) {
		var http = new haxe_Http(args);
		http.onData = function(data) {
			terminal.print(data);
		};
		http.request();
	}
});
var programs_Echo = function() {
	Program.call(this);
};
programs_Echo.__super__ = Program;
programs_Echo.prototype = $extend(Program.prototype,{
	run: function(terminal,args) {
		terminal.print(args);
	}
});
var terminaljs_Terminal = $hx_exports["Terminal"] = function(id) {
	this._cursorBlinkRate = 500;
	this._preCursor = "";
	this._shouldBlinkCursor = true;
	this._input = window.document.createElement("p");
	this._cursor = window.document.createElement("span");
	this._inputLine = window.document.createElement("span");
	this._inputLinePre = window.document.createElement("span");
	this._output = window.document.createElement("p");
	this._innerWindow = window.document.createElement("div");
	this.html = window.document.createElement("div");
	this.html.className = "Terminal";
	if(id != null) {
		this.html.id = id;
	}
	this._input.appendChild(this._inputLinePre);
	this._input.appendChild(this._inputLine);
	this._input.appendChild(this._cursor);
	this._innerWindow.appendChild(this._output);
	this._innerWindow.appendChild(this._input);
	this.html.appendChild(this._innerWindow);
	this.setBackgroundColor("black");
	this.setTextColor("white");
	this.setTextSize("1em");
	this.setWidth("100%");
	this.setHeight("100%");
	this.html.style.fontFamily = "Monaco, Courier";
	this.html.style.margin = "0";
	this.html.style.overflow = "auto";
	this.html.style.resize = "auto";
	this._innerWindow.style.padding = "10px";
	this._input.style.margin = "0";
	this._output.style.margin = "0";
	this._cursor.style.background = "white";
	this._cursor.innerHTML = "&nbsp;";
	this._cursor.style.display = "none";
	this._input.style.display = "none";
	this._cursorBlinkRate = 500;
	this.setPrompt("$ ");
};
terminaljs_Terminal.triggerCursor = function(inputField,terminal,blinkRate) {
	window.setTimeout(function() {
		if(terminal._shouldBlinkCursor) {
			terminal._cursor.style.visibility = terminal._cursor.style.visibility == "visible" ? "hidden" : "visible";
		} else {
			terminal._cursor.style.visibility = "visible";
		}
		terminaljs_Terminal.triggerCursor(inputField,terminal,blinkRate);
	},blinkRate);
};
terminaljs_Terminal.initInput = function(terminal) {
	var inputField = window.document.createElement("input");
	terminal._inputField = inputField;
	inputField.style.position = "absolute";
	inputField.style.zIndex = "-100";
	inputField.style.outline = "none";
	inputField.style.border = "none";
	inputField.style.opacity = "0";
	inputField.style.fontSize = "0.2em";
	terminal._inputLine.textContent = "";
	terminal._input.style.display = "block";
	terminal.html.appendChild(inputField);
	terminaljs_Terminal.triggerCursor(inputField,terminal,terminal._cursorBlinkRate);
	terminal._cursor.style.display = "inline";
	terminal.html.onclick = function() {
		inputField.focus();
	};
	inputField.onkeydown = function(e) {
		if(e.key == "LeftArrow" || e.key == "UpArrow" || e.key == "RightArrow" || e.key == "DownArrow" || e.key == "Tab") {
			e.preventDefault();
		} else if(e.key != "Enter") {
			window.setTimeout(function() {
				terminal._inputLine.textContent = inputField.value;
			},1);
		}
	};
	inputField.onkeyup = function(e1) {
		if(e1.key == "Enter") {
			terminal.validate();
		}
	};
	inputField.focus();
};
terminaljs_Terminal.prototype = {
	validate: function() {
		var inputValue = this._inputField.value;
		this._inputLine.textContent = "";
		this._inputField.value = "";
		this.print(this._preCursor + inputValue);
		this._callback(inputValue);
	}
	,print: function(message) {
		var newLine = window.document.createElement("p");
		newLine.style.margin = "0";
		newLine.style.fontFamily = "inherit";
		newLine.innerHTML = message;
		this._output.appendChild(newLine);
		this.html.scrollTop = this.html.scrollHeight;
	}
	,append: function(element) {
		this._output.appendChild(element);
		this.html.scrollTop = this.html.scrollHeight;
	}
	,input: function(callback) {
		this._callback = callback;
		terminaljs_Terminal.initInput(this);
	}
	,clear: function() {
		this._output.innerHTML = "";
	}
	,setTextSize: function(size) {
		this._output.style.fontSize = size;
		this._input.style.fontSize = size;
	}
	,setTextColor: function(col) {
		this.html.style.color = col;
		this._cursor.style.background = col;
	}
	,setBackgroundColor: function(col) {
		this.html.style.background = col;
		this._cursor.style.color = col;
	}
	,setWidth: function(width) {
		this.html.style.width = width;
	}
	,setHeight: function(height) {
		this.html.style.height = height;
	}
	,setPrompt: function(prompt) {
		this._preCursor = prompt;
		this._inputLinePre.innerHTML = this._preCursor;
	}
	,setCursorBlinkRate: function(blinkRate) {
		this._cursorBlinkRate = blinkRate;
	}
	,blinkCursor: function(value) {
		this._shouldBlinkCursor = value;
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var __map_reserved = {};
Website.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
